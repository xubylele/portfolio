---
import { languages, type Lang } from '../../i18n/ui';
import { getLangFromUrl, getRelativeUrl } from '../../i18n/utils';

interface Props {
  id?: string;
}

const { id = 'language-selector' } = Astro.props;
const currentLang = getLangFromUrl(Astro.url);
---

<div class="relative" id={id}>
  <button
    id={`${id}-button`}
    class="flex items-center gap-2 text-white/80 hover:text-white transition-all duration-300 text-sm font-medium px-3 py-2 rounded-md hover:bg-white/10 hover:scale-105"
    aria-label="Select language"
  >
    <span class="transition-all duration-300">{languages[currentLang]}</span>
    <i class="fa-solid fa-chevron-down text-xs transition-transform duration-300" id={`${id}-chevron`}></i>
  </button>
  
  <div 
    id={`${id}-dropdown`}
    class="absolute right-0 top-full mt-2 bg-[#4b1e3d]/95 backdrop-blur-sm rounded-md shadow-lg opacity-0 invisible transition-all duration-300 min-w-[120px] transform origin-top scale-95 z-50"
  >
    <ul class="py-2">
      {Object.entries(languages).map(([lang, label], index) => (
        <li class="overflow-hidden">
          <a
            href={getRelativeUrl(Astro.url, lang as Lang)}
            class={`block px-4 py-2 text-sm transition-all duration-300 transform hover:translate-x-1 ${
              currentLang === lang
                ? 'text-[#f6ea5d] bg-white/10 scale-105'
                : 'text-white/80 hover:text-white hover:bg-white/5'
            }`}
            hreflang={lang}
            style={`animation-delay: ${index * 50}ms`}
          >
            {label}
          </a>
        </li>
      ))}
    </ul>
  </div>
</div>

<script define:vars={{ id }}>
  const languageButton = document.getElementById(`${id}-button`);
  const languageDropdown = document.getElementById(`${id}-dropdown`);
  const languageChevron = document.getElementById(`${id}-chevron`);
  let isOpen = false;

  const toggleDropdown = () => {
    isOpen = !isOpen;
    
    if (isOpen) {
      languageDropdown?.classList.remove('opacity-0', 'invisible', 'scale-95');
      languageDropdown?.classList.add('opacity-100', 'visible', 'scale-100');
      languageChevron?.classList.add('rotate-180');
    } else {
      languageDropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
      languageDropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
      languageChevron?.classList.remove('rotate-180');
    }
  };

  languageButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    toggleDropdown();
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', (e) => {
    if (!document.getElementById(id)?.contains(e.target)) {
      isOpen = false;
      languageDropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
      languageDropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
      languageChevron?.classList.remove('rotate-180');
    }
  });

  // Close dropdown on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && isOpen) {
      isOpen = false;
      languageDropdown?.classList.add('opacity-0', 'invisible', 'scale-95');
      languageDropdown?.classList.remove('opacity-100', 'visible', 'scale-100');
      languageChevron?.classList.remove('rotate-180');
    }
  });
</script>

<style>
  .group:hover li a {
    animation: fadeInSlide 0.3s ease-out forwards;
    opacity: 0;
    transform: translateX(-10px);
  }
  
  @keyframes fadeInSlide {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>
